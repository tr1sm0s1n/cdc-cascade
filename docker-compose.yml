networks:
  tda-network:
    name: tda-network

services:
  postgres:
    image: postgres:latest
    container_name: ${DB_HOST}
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_PORT=${DB_PORT}
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "max_wal_senders=1"
      - "-c"
      - "max_replication_slots=1"
    expose:
      - ${DB_PORT}
    networks:
      - tda-network
    volumes:
      - tda-postgres-volume:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql

  redis:
    image: redis/redis-stack:latest
    container_name: ${REDIS_HOST}
    restart: unless-stopped
    environment:
      REDIS_ARGS: "--requirepass ${REDIS_PASS}"
    expose:
      - ${REDIS_PORT}
    ports:
      - ${REDIS_UI_PORT}:${REDIS_UI_PORT}
    networks:
      - tda-network
    volumes:
      - tda-redis-volume:/data

  api:
    build: .
    image: ${API_HOST}
    container_name: ${API_HOST}
    restart: unless-stopped
    stop_grace_period: 30s
    depends_on:
      - postgres
      - redis
    entrypoint: './bin/api'
    environment:
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - REDIS_PASS=${REDIS_PASS}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - API_PORT=${API_PORT}
    ports:
      - ${API_PORT}:${API_PORT}
    networks:
      - tda-network

volumes:
  tda-postgres-volume:
    name: tda-postgres-volume
  tda-redis-volume:
    name: tda-redis-volume
